import * as path from 'path';
import { createConnection } from 'typeorm';

import { assert, makeLogger } from '../helpers';

import User from './users';
import Settings from './settings';

let log = makeLogger('models/index');

function makeOrmConfig() {
    let ormConfig = null;

    // Keep this switch in sync with ../config.js!
    switch (process.kresus.dbType) {
        case 'sqlite':
            assert(
                typeof process.kresus.sqlitePath !== 'undefined',
                'missing db path in server/models'
            );
            ormConfig = {
                type: 'sqlite',
                database: process.kresus.sqlitePath
            };
            break;

        case 'postgres':
        case 'mysql':
        case 'mariadb':
            assert(typeof process.kresus.dbHost === 'string', 'missing db host in server/models');
            assert(typeof process.kresus.dbPort === 'number', 'missing db port in server/models');
            assert(
                typeof process.kresus.dbUsername === 'string',
                'missing db username in server/models'
            );
            assert(
                typeof process.kresus.dbPassword === 'string',
                'missing db password in server/models'
            );
            assert(typeof process.kresus.dbName === 'string', 'missing db name in server/models');
            ormConfig = {
                type: process.kresus.dbType,
                host: process.kresus.dbHost,
                port: process.kresus.dbPort,
                username: process.kresus.dbUsername,
                password: process.kresus.dbPassword,
                database: process.kresus.dbName
            };
            break;
        default:
            assert(false, 'unexpected db type in server/models');
    }

    ormConfig.logging = process.kresus.dbLog;

    return ormConfig;
}

export async function initModels(appOptions) {
    let ormConfig = Object.assign(makeOrmConfig(), {
        // Automatically run migrations.
        migrationsRun: true,

        // Entity models.
        entities: [path.join(__dirname, 'entities/*.js')],

        // Migration files.
        migrations: [path.join(__dirname, 'migrations/*.js')],

        // Automatically synchronize the database schema on startup. Very
        // unsafe, use only to look at queries generated by the ORM.
        synchronize: false
    });

    await createConnection(ormConfig);

    // Create default user.
    let user = await User.find();
    if (!user) {
        let { login } = process.kresus.user;
        assert(login, 'There should be a default login set!');
        user = await User.create({ login });
        log.info('Creating default user...');
    }
    process.kresus.user.id = user.id;
    log.info(`User has id ${user.id}`);

    // Try to migrate the older Pouchdb database, if it's not been done yet.
    let didMigrate = await Settings.findOrCreateDefaultBooleanValue(
        user.id,
        'migrated-from-cozydb'
    );
    log.info(`Checking if the migration from CozyDB is required... ${didMigrate ? 'no' : 'yes'}`);
    if (!didMigrate) {
        let all = require('../controllers/v1/all');
        let exportCozyDb = require('kresus-export-cozydb');
        let options = Object.assign({}, appOptions);
        log.info('Migrating from CozyDB...');
        try {
            let world = await exportCozyDb.run(options);
            await all.importData(user.id, world);

            log.info('Migrating from CozyDB done!');
            await Settings.updateByKey(user.id, 'migrated-from-cozydb', true);
        } catch (err) {
            log.error(`Unable to migrate from CozyDB: ${err.message}
${err.stack}`);

            log.info('Removing partially imported data...');

            // Nuclear option: remove the user, and rely on SQL to remove all associated data.
            await User.destroy(user.id);

            let { login } = process.kresus.user;
            user = await User.create({ login });
            process.kresus.user.id = user.id;
            log.info(`User (after cleanup) has id ${user.id}`);
        }
    }
}
